%    y = aconv(f,x)
%    [beta,alfa] = AIDyadDown(afine,D,F,EF)
%    afine = AIDyadUp(beta,alfa,D,F,EF)
%    fine = AIRefine(coarse,D,Filter,EF)
%    fine  = AIRefine2d(coarse,L,D,Filter,Efil)
%    titl = AppendTitle(Default,Extra)
%    [cp, btree] = AutoCPTour(Format,x,D,title)
%    AutoImage(img [,x,y])
%    [wp, btree] = AutoWPTour(x,D,qmf,titlestr)
%    awt = AWT(x,nvoice,Name,sigma2,par2);
%    [btree,vtree] = Best2dBasis(sqtree,D)
%    [btree,vtree] = BestBasis(stree,D)
%    [shift,value] = BestShift(stat)
%    m = BlockMedian(P, interval)
%    BrowseImages
%    btree = BuildFBITree(D);
%    [skellist,skelptr,skellen] = BuildSkelMap(maxmap)
%    [skellist,skelptr,skellen] = BuildSkelMapFast(maxmap)
%    pkt2 = Calc2dPktTable(TFType,img,D,TFPar)
%    SQTree = Calc2dSQTree(pkt2,D,Entropy[,EntPar])
%    SQTree = Calc2dStatTree(TFType,img,D,TFPar,ent[,EntPar])
%    heights = Calc2dTreeHeight(stree,D)
%    norms = CalcCWTNorms(cw,p);
%    [n,nscale,nvoice,noctave] = CalcCWTPars(sz)
%    [scales,xtick,ytick] = CalcCWTScale(sz);
%    Ent = CalcEntropy(object,ent[,par])
%    f = CalcFracSpectrum(z,q,alpha)
%    d = CalcGenFracDimen(z,q,scale)
%    tau = CalcMomentGenFun(z,a,loscale,hiscale)
%    stree = CalcShiftStat(TIWT,ent[,par])
%    stree = CalcStatTree(pkt,ent[,par])
%    z = CalcThermoPartition(cw,mm,q)
%    [maxheight, cost] = CalcTreeHeight(stree,D)
%    CalcWPLocation(d,b,k,qmf,n)
%    blo = CDJVDyadDown(bhi,F,LEF,REF)
%    bhi = CDJVDyadUp(blo,F,LEF,REF)
%    beta = CoarseMeyerCoeff(fhat,C,n,deg)
%    cpjf = CoarseMeyerProj(beta,C,n,deg)
%    cwd = CohenDist(sig,sigma)
%  CohWave -- Denoising of 1-d signal with wavelet thresholding.
%    wcoefs = CombineCoeff(rtrigcoefs,itrigcoefs,window,n)
%    bestlev = CompareStdBases(stree,D)
%    ContourMultiRes(wc,L,scal,qmf)
%    [bb,stats,coef] = CP2dTour(img,MaxDeep,titlestr)
%    [bb,stats,coef] = CP2dTour(img,MaxDeep,titlestr)
%    cp = CPAnalysis(x,D,bell) 
%    sig = CPAtomicSynthesis(atoms,cp,bell)
% software, which is available on the Internet at
%    [clean,bb,st] = CPDeNoise(x,D,bell)
%    dcp = CPImpulse(cp,d,b,k,bell)
%    [cp, btree] = CPMPursuitTour(Format,x,D,ball [,natom,title])
%    atomic = CPPursuit(x,D,bell,natom,frac,show)
%    atomic = CPPursuitBF(x,D,bell,natom,frac,show)
%    [cp, btree] = CPPursuitTour(Format,x,D,ball [,natom,title])
%    x = CPSynthesis(btree,cp,bell)
%    [cp, btree] = CPTour(Format,x,D,title)
%    dyad_sig = CutDyad(sig)
%    cwt = CWT(x,nvoice,wavelet,oct,scale)
z = x((l1+1-i):l1,:);
%    c = dct2_iv(x)
%    c = dct_ii(x)
%    c = dct_iii(x)
%    c = dct_iv(x)
%    [beta,alfa] = DDDyadDown(afine,D,F,LEF,REF)
%    afine = DDDyadUp(beta,alfa,D,F,LEF,REF)
%    fine = DDRefine(coarse,D,Filter,LEF,REF)
%    alpha = DetailMeyerCoeff(fhat,j,n,deg)
%    dpjf = DetailMeyerProj(alpha,j,n,deg)
%    DisplayDWT(dwt);
%    DisplayDWT(dwt);
%    DisplayMultiRes(wc,L,scal,qmf,type)
%    DisplayWaveCoeff(wc,L,scal,type[,num_use])
%    [beta,alpha] = DownDyad_SBS(x,qmf,dqmf)
%    d = DownDyadHi(x,f)
%    d = DownDyadHi_PBS(x,sqmf)
%    d = DownDyadLo(x,f)
%    d = DownDyadLo_PBS(x,sf)
%    q = DownQuad(Quad,qmf,xbit,ybit)
%    DrawHeisenberg(x0,x1,y0,y1,v)
%    s = dst_i(x)  Forward DST-I
%    s = dst_ii(x)
%    s = dst_iii(x)
%    ix = dyad(j);
%    ix = dyad2ix(j,k)
%    [n,J] = dyadlength(x)

%    extra = edgefold(which,xc,bp,bm)
%    extra = endfold(which,xc,bp,bm)
        if par1==1 & par2==1,
%    extproj = ExtendProj(proj,n,window,sympts,sym)
%    ridge = ExtractRidge(ridgenum,wt,skellist,skelptr,skellen)
%    sig = FCPSynthesis(cp,bell)
%    alpha = FineMeyerCoeff(fhat,n,deg)
%    dpjf = FineMeyerProj(alpha,j,n,deg)
%    wc = FMIPT(x,L,D)
%    nwc = FNWT_PO(x,L,qmf)
%    y = fold(xc,xl,xr,bp,bm)
%    fldx = FoldMeyer(x, sympts, polarity, window,deg)
%    coef = FPT2_CP(basis,img,D)
%    coef = FPT2_WP(basis,img,qmf)
%    coef = FPT_CP(basis,x,D,bell)
%    coef = FPT_WP(basis,x,qmf)
%    z = FracPartition(cw,mm,q)
%    tau = FracScalExp(z,a,loscale,hiscale)
%    f = FracSingSpect(z,q,alpha)
%    S = FSFT_PO(M,L,qmf)
%    wc = FTWT2_PO(x,L,qmf)
%    wc = FTWT2_YM(x,L,qmf)
%    sig = FWPAtomicSynthesis(atomic,wp,qmf)
%    sig = FWPSynthesis(wp,qmf)
% LastWave software, which is available on the Internet at
%    wc = FWT2_PB(x,L,qmf,dqmf)
%    wc = FWT2_PBS(x,L,qmf,dqmf)
%    wc = FWT2_PO(x,L,qmf)
%  Usage
%    TIWT = FWT2_TI(x,L,qmf) 
%    wc = FWT2_YM(x,deg,L)
%    wc = FWT_AI(x,L,D)
%  Usage
%    wc = FWT_CDJV(x,L,N)
%    wc = FWT_DD(x,L,D)
%    wc = FWT_IO(x,L,N)
%    wc = FWT_PB(x,L,qmf,dqmf)
%    wc = FWT_PBS(x,L,qmf,dqmf)
%    wc = FWT_PO(x,L,qmf)
%    wc = FWT_SBS(x,L,qmf,dqmf)
%    StatWT = FWT_Stat(x,D,qmf) 
%    TIWT = FWT_TI(x,L,qmf) 
%    w = FWT_YM(x,L,deg)
% software, which is available on the Internet at
%    GrayImage(img,ngray)
%    B=GWN(n,beta)
%    B=GWN2(n,beta)
%    Noisysig = GWNoisy(sig,sigma)
%    Noisyim = GWNoisy2(im,sigma)
%    x = HardThresh(y,t)
%    coarse = HCoarsen2d(fine,L)
%    HitAnyKey([arg])
%    fine = HRefine2d(coarse,L)
%    [out,wcoef,wcoefrest] = HT(Noisy,L,qmf,sigma,coef)
%    out = HT2(Noisy,L,qmf,sigma)
%    xhat = HybridThresh(y)
    
%    y = iconv(f,x)
%  Usage 
%    ifprint(fig,file)
%    ImageAtomicPhase(TFType,atomlist,n[,titlestr,nTFR,qmf]) 
%    ImageCWT(cwt,scaling,colors)
%    ImageFig(num)
%    ImageGaborPhase(pkt,ell[,titlestr])
%    ImagePacketPhase(TFtype,pkt[,titlestr,nTFR,qmf]) 
%    ImagePhasePlane(TFtype,basis,pkt[,titlestr,nTFR,qmf])
%    ImagePhaseVarious(wp,wp_stree,cp,cp_stree,titlestr)
%    ImageRWT(rwt,scaling,colors)
%    ImageWTMM(maxmap)
%    x = IMIPT(wc,L,D)
% It is implemented in the LastWave software, which is available on
% Usage f = MaxRecons(maxima);
% such that g(2*n) = f(n)
%    s = InvShrink(wc,L,sa,alpha)
%    x = INWT_PO(nwc,L,qmf)
%    img = IPT2_CP(basis,coef,D)
%    img = IPT2_WP(btree,coef,qmf)
%    x = IPT_CP(btree,coef,D,bell)
%    x = IPT_WP(btree,coef,qmf)
%    sig = iRWT(rwt,scale);
%    M = ISFT_PO(S,L,qmf)
%    x = IWT2_PO(wc,L,qmf)
%    x = ITWT2_YM(wc,L,qmf)
%    sig = IWindowFT(specgm,w,Name)
%    x = IWT2_PB(wc,L,qmf,dqmf)
%    x = IWT2_PBS(wc,L,qmf,dqmf)
%    x = IWT2_PO(wc,L,qmf)
%  Usage
%    x = IWT2_TI(TIWT,qmf)
%    x = IWT2_YM(wc,L,deg)
%    x = IWT_AI(wc,L,D)
%  Usage
%    x = IWT_CDJV(wc,L,N)
%    x = IWT_DD(wc,L,D)
%    x = IWT_IO(wc,L,N)
%    x = IWT_PB(wc,L,qmf)
%    x = IWT_PBS(wc,L,qmf)
%    x = IWT_PO(wc,L,qmf)
%    x = IWT_SBS(wc,L,qmf,dqmf)
%    x = IWT_Stat(StatWT,L,qmf)
%    x = IWT_TI(TIWT,qmf)
%    x = IWT_YM(wc,L,deg)
%    [d,b,k] = ix2pkt(ix,D,n)
    
a = interval(1); b= interval(2);
%    LockAxes(a)
%
%    l = lshift(x)
%    img = Make2dCosinePacket(d,bx,by,kx,ky,D,n)
%    sig = Make2dSignal(Name,n[,par])
%    wave2d = Make2dWavelet(j,k1,k2,ep[,Family,par,n])
%    img = Make2dWaveletPacket(d,bx,by,kx,ky[,n,qmf])
%    EdgeFilt = MakeAIBdryFilter(D)
%    Filt = MakeAIFilter(D)
%
%    btree = MakeBasis(n,btype,par)
%    fBr = MakeBrownian(n,H,par)
%    [qmf,dqmf] = MakeBSFilter(Type,Par)
%    wave = MakeWavelet(j,k [,Family,par,Gender,n])
%     recursively generates a Cantor distribution.
%    [a,b,c] = MakeCDJVFilter(request,degree)
%    cospkt = MakeCosinePacket(d,b,k[,Bell,D,n])
%    [LEFilt,REFilt] = MakeDDBdryFilter(D)
%    Filt = MakeDDFilter(D)
%    im = makediag(m,n)
%
%    Frac = MakeFractal(n,base,type,prob)
%    sig = MakeImage(Name,n[,par])
%  Usage
%    [bp,bm] = MakeONBell(bell,m)
%    qmf = MakeONFilter(Type,Par)
%   Generates NR locally stationary process realizations
%    sig = MakeSignal(Name,n)
%    spkt = MakeSynthesisTable(atomic,pkt)
%    [h1,h2] = MakeTiledFigures(2,format);
%    wave = MakeWavelet(j,k [,Family,par,Gender,n])
%    wavepkt = MakeWaveletPacket(d,b,k[,Family,par,n])
%    wig = MakeWindow(Name,n)
%          'raw' form.
%    NS = Mat2SparseNSForm(M,L,qmf,epsilon)
%    S = Mat2SparseSForm(M,L,qmf,epsilon)
%    P = MedianInterp(blockmedians)
%    [smooth,rough] = MedITriadDown(x,j,D)
%    MedITriadUp(smooth,rough)
%    x = MinMaxThresh(y)
%    h = MirrorFilt(l)
%    h = MirrorSymmFilt(l)
% LastWave software, which is available on the Internet at
 D = nscales-1;
%    maxmap = MM_RWT(rwt,par)
coef2 = 0; 
%    new_res = MonitorPursuit(type,nuc,t,amax,res,dp,D,pktype)
%    ws = MultiHybrid(wc,L)
%    s = MultiMAD(wc,L)
%    ws = MultiSURE(wc,L)
%    ws = MultiVisu(wc,L)
%    ix = ndyad(j,gender)
%    index = node(d,b)
%    y = NonStdWaveMult(NS,x,L,qmf)
%    [y,coef] = NormNoise(x,qmf)
%    pkt = PackBasisCoeff(btree,opkt,x)
%    p = packet(d,b,n)
%    TIWT = PackShiftCoeff(path,oTI,c,renorm)
%    dyad_sig = PadDyad(sig)
%         'header' is an optional title.
%    [row,ix] = pkt2ix(d,b,k,D,n)
%    Plot2dBasisTree(basis,stat_tree,D,n)
%    Plot2dPartition(basis,color,ax,D)
%    PlotAIMultiRes(wc,L,scal,D)
%    PlotAtomicPhase(atomlist,n[,titlestr]) 
%    PlotBasisTree(btree,D,stree[,titlestr])
%    PlotCoeffComparison(wp,wp_stree,cp,cp_stree,titlestr)
%    PlotColumns(matrix,starting,ABS,GlobalScale);
%    PlotCompressNumbers(coef,signaltitle)
%    PlotDDMultiRes(wc,L,scal,D)
%    PlotGaborPhase(pkt,ell[,titlestr])
%    PlotGenFracDimen(d,q,scale)
%    PlotMomentGenFun(tau,q)
%    PlotMRA_MT(wc,L,scal,D,[Tilte])
%    PlotMTCoeff(wc,L,scal)
%    PlotMultiRes(wc,L,scal,qmf)
%    PlotMultiSpectrum(f,alpha)
%    PlotPacketTable(pkt,scal)
%    PlotPBSMultiRes(wc,L,scal,qmf,dqmf)
%    PlotPhasePlane(TFType,btree,pkt[,titlestr,qmf]) 
%    PlotPhaseTiling(type,btree,pkt[,titlestr,plotchar]) 
%    PlotPhaseComparison(wp,wp_stree,cp,cp_stree,titlestr)
a = range(1);
%    PlotRidges(ridgelist,wt,skellist,skelptr,skellen)
%    PlotSkelMap(n,nscale,skellist,skelptr,skellen [,titlestr,color,chain])
%    PlotSpikes(base,t,x)
%    PlotStatTable(StatWT,scal)
%    MakeSynthesisTable(TFType,atomic,n,D,scal,ttl)
%    PlotThermoPartition(sq,z,cw,q)
%    PlotWaveCoeff(wc,L,scal)
%    PlotWavePhase(pkt[,titlestr])
%    PlotYMMultiRes(wc,L,scal,deg)
%    [skellist,skelptr,skellen] = PruneSkelMap(cw,dynrange,persist,skm,skp,skl)
%    ix = qnode(d,bx,by)
%    [ix,iy] = qpkt2ix(deep,bx,by,kx,ky,n)
%    [kx,ky] = quad2ix(j,k1,k2,ep)
%    [lox,hix,loy,hiy] = quadbounds(d,bx,by,n)
%    [n,J] = quadlength(x)
%
%    [m21,m22,m23, a,b,c] = QuadMedRef(m1, m2, m3)
%    c = QuasiDCT(x,dir)
%    s = QuasiDST(x,dir)
%          matrix 'mat' of size 'lines' * 'columns'.
%    Image = ReadImage(Name)
%    signal = ReadSignal(Name)
a = interval(1); b= interval(2);
%    RegisterPlot(figname,nrflag)
%    r = reverse(x)
%    localmaxima = Ridge_AWT(m,par,ABS);
%    ridges = Ridge_WindowFT(specgm);
%    r = rnshift(x,t)
%    r = rshift(x)
%    rwt = RWT(x,nvoice,wavelet)
%    scale = CWTscale(sig,cwt);
%    [rtrigcoefs, itrigcoefs] = SeparateCoeff(wcoefs,window)
%    row = ShapeAsRow(sig)
%    vec = ShapeLike(sig,proto)
%    [skellist,skelptr,skellen] = SkelMap(maxmap)
%    value=SNR(sig1,sig2)
%    x = SoftThresh(y,t)
%    specgm = Spectrogram(sig,w,m,titl)
%    [out,wcoef,wcoefrest] = ST(Noisy,L,qmf,sigma)
%    out = ST2(Noisy,L,qmf,sigma)
%    TIWT = Stat2TI(StatWT)
%    y = StdWaveMult(S,x,L,qmf)
%    [i,j] = StretchMatrix(ie,je,n,L)
%    thresh = SUREThresh(y)
%    y = symm_aconv(sf,x)
%    y = iconv(sf,x)
%    aftf = TFDist_AF(sig)
%  Usage 
%    out=ThreshWave(Noisy,type,TI,sigma,mult,L,qmf)
%    out=ThreshWave2(Noisy,type,TI,sigma,mult,L,qmf)
%  Usage 
%    StatWT = TI2Stat(TIWT)
%  Usage 
%  Usage 
% triad -- Index entire j-th triad of 1-d wavelet xform
        global SORTX
%    [xc,xl,xr] = unfold(y,bp,bm)
%    unfldx = UnfoldMeyer(x, sympts, polarity, window,deg)
%    UnlockAxes
%    coef = Unpack2dBasisCoeff(basis,pkt2)
%    x = UnpackBasisCoeff(basis,pkt)
%    c = UnpackShiftCoeff(path,TIWT)
%    s = UnpackStatValue(btree,stree)
%    x = UpDyad_SBS(beta,alpha,qmf,dqmf)
%    u = UpDyadHi(d,f)
%    u = UpDyadHi_PBS(d,f)
%    u = UpDyadLo(d,f)
%    u = UpDyadLo_PBS(d,sf)
%    Q = UpQuad(quad,qmf,xbit,ybit)
%    u = UpSample(d[,s]) 
%    thresh = ValSUREThresh(y)
%    versaplot(subp,xarg,yarg,parg,tit,ax,hld)
%    x = VisuThresh(y)
%    WaitUntil(oldclock,sec)
%    [xh,xwh] = WaveShrink(y,type,L,qmf)
%    y = WhiteNoise(x)
%   out = wiener(Noisy,in,sigma)
%   out = Wiener2(Noisy,in,sigma)
%    afwig = WignerDist(sig)
%    specgm = WindowFT(sig,w,m,Name,titl)
%    nu = WindowMeyer(xi,deg)
%    [bb,stats,coef] = WP2dTour(img,MaxDeep,qmf[,titlestr])
%    [bb,stats,coef] = WP2dTour(img,MaxDeep,qmf[,titlestr])
%    wp = WPAnalysis(x,D,qmf) 
%    sig = WPAtomicSynthesis(atomic,wp,qmf)
% software, which is available on the Internet at
%    [clean,bb,st] = WPDeNoise(x,D,qmf)
%    dwp = WPImpulse(wp,d,b,k,qmf)
%    [wp, btree] = WPMPursuitTour(Format,x,D,qmf [,maxits,title])
%    atomic = WPPursuit(x,D,qmf,natom,frac,show)
%    atomic = WPPursuitBF(x,D,qmf,natom,frac)
%    [wp, btree] = WPPursuitTour(Format,x,D,qmf [,maxits,title])
%    x = WPSynthesis(btree,wp,qmf)
%    [wp, btree] = WPTour(Format,x,D,qmf,title)
%    indnew = WrapAround(ind, n)
%    maxmap = WTMM(cwt,par)
%    [wp, btree] = WPTour(Format,x,D,qmf,title)
%    wig = WVDist(sig)
%    afwig = WVDist_AF(sig)

    
    
%   
% Part of WaveLab Version 802
% Built Sunday, October 3, 1999 8:52:27 AM
% This is Copyrighted Material
% For Copying permissions see COPYING.m
% Comments? e-mail wavelab@stat.stanford.edu
%   
    
